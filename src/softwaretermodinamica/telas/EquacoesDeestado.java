/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package softwaretermodinamica.telas;

import java.text.DecimalFormat;
import softwaretermodinamica.bancodedados.DAO;
import softwaretermodinamica.bancodedados.PropriedadesDeEspeciesPuras;
import softwaretermodinamica.equacoesdeestado.EquacoesDeEstado;
import softwaretermodinamica.equacoesdeestado.GasIdeal;
import softwaretermodinamica.equacoesdeestado.MetodoMatsoukas;
import softwaretermodinamica.equacoesdeestado.PR;
import softwaretermodinamica.equacoesdeestado.RK;
import softwaretermodinamica.equacoesdeestado.Rackett;
import softwaretermodinamica.equacoesdeestado.SRK;
import softwaretermodinamica.equacoesdeestado.VDW;
import softwaretermodinamica.equacoesdeestado.Virial;
import softwaretermodinamica.pressaodesaturacao.CorrelacaoLeeKesler;

/**
 *
 * @author Willian Belincanta Ribeiro
 */
public class EquacoesDeestado extends javax.swing.JFrame {

    /**
     * Creates new form EquacoesDeestado
     */
    public EquacoesDeestado() {
        initComponents();
        composto();
        panelResultadoSimples.setVisible(false);
        panelResultadoRackett.setVisible(false);
        panelResultadoComposto.setVisible(false);
    }

    //metodo para buscar os compostos para jComboBox
    private void composto() {
        DAO e = new DAO();
        for (PropriedadesDeEspeciesPuras ee : e.leituraPropriedades()) {
            boxCompostoP.addItem(ee);
            boxComposto.addItem(ee);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        abas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        boxEquacaoP = new javax.swing.JComboBox<>();
        boxCompostoP = new javax.swing.JComboBox<>();
        temperaturaP = new javax.swing.JTextField();
        unidadeTempP = new javax.swing.JComboBox<>();
        volume = new javax.swing.JTextField();
        unidadeVolume = new javax.swing.JComboBox<>();
        botaoCalcularP = new javax.swing.JButton();
        panelResultadoP = new javax.swing.JPanel();
        resultadoP = new javax.swing.JLabel();
        propriedadesP = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        labelTc = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        labelPc = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        labelOmega = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        boxEquacaoV = new javax.swing.JComboBox<>();
        boxComposto = new javax.swing.JComboBox<>();
        pressao = new javax.swing.JTextField();
        unidadePressao = new javax.swing.JComboBox<>();
        temperaturaV = new javax.swing.JTextField();
        unidadeTempV = new javax.swing.JComboBox<>();
        botaoCalcularV = new javax.swing.JButton();
        propriedadesV = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        labelTcV = new javax.swing.JLabel();
        labelPcV = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        labelOmegaV = new javax.swing.JLabel();
        labelZc = new javax.swing.JLabel();
        panelResultadoV = new javax.swing.JPanel();
        panelResultadoSimples = new javax.swing.JPanel();
        resultadoSimples = new javax.swing.JLabel();
        panelResultadoRackett = new javax.swing.JPanel();
        resultadoRackett = new javax.swing.JLabel();
        panelResultadoComposto = new javax.swing.JPanel();
        resultado1 = new javax.swing.JLabel();
        resultado2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Equações de Estado");
        setResizable(false);

        abas.setBackground(new java.awt.Color(255, 255, 255));
        abas.setMinimumSize(new java.awt.Dimension(1002, 640));
        abas.setPreferredSize(new java.awt.Dimension(1002, 640));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(45, 118, 232));
        jPanel3.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.setPreferredSize(new java.awt.Dimension(407, 144));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Lucida Calligraphy", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Equações de Estado");
        jLabel1.setMaximumSize(new java.awt.Dimension(363, 58));
        jLabel1.setMinimumSize(new java.awt.Dimension(363, 58));
        jLabel1.setPreferredSize(new java.awt.Dimension(363, 58));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1002, -1));

        jLabel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selecione o composto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 480, 60));

        jLabel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Temperatura", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, 190, 60));

        jLabel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Volume Molar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 300, 190, 60));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Equação selecionada");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, -1, -1));

        boxEquacaoP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boxEquacaoP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gás Ideal", "Virial", "van der Waals", "Redlich-Kwong", "Soave-Redlich-Kwong", "Peng-Robinson" }));
        jPanel1.add(boxEquacaoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 168, -1, -1));

        boxCompostoP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxCompostoPItemStateChanged(evt);
            }
        });
        jPanel1.add(boxCompostoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 235, 420, 20));

        temperaturaP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        temperaturaP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(temperaturaP, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 325, 80, -1));

        unidadeTempP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        unidadeTempP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "K", "ºC", "ºF", "R" }));
        jPanel1.add(unidadeTempP, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 322, -1, -1));

        volume.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        volume.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(volume, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 325, 80, -1));

        unidadeVolume.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        unidadeVolume.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "m³/mol", "L/mol", "in³/mol", "ft³/mol" }));
        jPanel1.add(unidadeVolume, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 322, -1, -1));

        botaoCalcularP.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        botaoCalcularP.setText("CALCULAR");
        botaoCalcularP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCalcularPActionPerformed(evt);
            }
        });
        jPanel1.add(botaoCalcularP, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 500, -1, -1));

        panelResultadoP.setBackground(new java.awt.Color(255, 255, 255));
        panelResultadoP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resultado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        resultadoP.setBackground(new java.awt.Color(255, 255, 255));
        resultadoP.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        resultadoP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultadoP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelResultadoPLayout = new javax.swing.GroupLayout(panelResultadoP);
        panelResultadoP.setLayout(panelResultadoPLayout);
        panelResultadoPLayout.setHorizontalGroup(
            panelResultadoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultadoPLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(resultadoP, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        panelResultadoPLayout.setVerticalGroup(
            panelResultadoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultadoP, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );

        jPanel1.add(panelResultadoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 550, 480, 70));

        propriedadesP.setBackground(new java.awt.Color(255, 255, 255));
        propriedadesP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Propriedades Termodinâmicas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Tc:");

        labelTc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelTc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTc.setText("jLabel11");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Pc:");

        labelPc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelPc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPc.setText("jLabel12");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("<html>&omega:");

        labelOmega.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelOmega.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelOmega.setText("jLabel14");

        javax.swing.GroupLayout propriedadesPLayout = new javax.swing.GroupLayout(propriedadesP);
        propriedadesP.setLayout(propriedadesPLayout);
        propriedadesPLayout.setHorizontalGroup(
            propriedadesPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propriedadesPLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTc)
                .addGap(64, 64, 64)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelPc)
                .addGap(45, 45, 45)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelOmega)
                .addContainerGap(75, Short.MAX_VALUE))
        );
        propriedadesPLayout.setVerticalGroup(
            propriedadesPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propriedadesPLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(propriedadesPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(labelTc)
                    .addComponent(jLabel11)
                    .addComponent(labelPc)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelOmega))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1.add(propriedadesP, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 390, 480, 90));

        abas.addTab("Pressão", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(45, 118, 232));
        jPanel4.setPreferredSize(new java.awt.Dimension(407, 144));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Lucida Calligraphy", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Equações de Estado");
        jLabel2.setMaximumSize(new java.awt.Dimension(363, 58));
        jLabel2.setMinimumSize(new java.awt.Dimension(363, 58));
        jLabel2.setPreferredSize(new java.awt.Dimension(363, 58));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1002, -1));

        jLabel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selecione o composto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 480, 60));

        jLabel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pressão", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 280, 190, 60));

        jLabel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Temperatura", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 280, 190, 60));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Equação selecionada");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, -1, -1));

        boxEquacaoV.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        boxEquacaoV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gás Ideal", "Virial", "van der Waals", "Redlich-Kwong", "Soave-Redlich-Kwong", "Peng-Robinson", "Rackett" }));
        jPanel2.add(boxEquacaoV, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 168, -1, -1));

        boxComposto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxCompostoItemStateChanged(evt);
            }
        });
        jPanel2.add(boxComposto, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 235, 420, 20));

        pressao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        pressao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(pressao, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 305, 80, -1));

        unidadePressao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        unidadePressao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pa", "bar", "mmHg", "atm", "PSI" }));
        jPanel2.add(unidadePressao, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 302, -1, -1));

        temperaturaV.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        temperaturaV.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(temperaturaV, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 305, 80, -1));

        unidadeTempV.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        unidadeTempV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "K", "ºC", "ºF", "R" }));
        jPanel2.add(unidadeTempV, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 302, -1, -1));

        botaoCalcularV.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        botaoCalcularV.setText("CALCULAR");
        botaoCalcularV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCalcularVActionPerformed(evt);
            }
        });
        jPanel2.add(botaoCalcularV, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 500, -1, -1));

        propriedadesV.setBackground(new java.awt.Color(255, 255, 255));
        propriedadesV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Propriedades Termodinâmicas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Tc:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Pc:");

        labelTcV.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelTcV.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTcV.setText("jLabel16");

        labelPcV.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelPcV.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPcV.setText("jLabel17");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("<html>&omega:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Zc:");

        labelOmegaV.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelOmegaV.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelOmegaV.setText("jLabel16");

        labelZc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        labelZc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelZc.setText("jLabel16");

        javax.swing.GroupLayout propriedadesVLayout = new javax.swing.GroupLayout(propriedadesV);
        propriedadesV.setLayout(propriedadesVLayout);
        propriedadesVLayout.setHorizontalGroup(
            propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propriedadesVLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTcV)
                    .addComponent(labelPcV))
                .addGap(69, 69, 69)
                .addGroup(propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(propriedadesVLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelZc))
                    .addGroup(propriedadesVLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelOmegaV)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        propriedadesVLayout.setVerticalGroup(
            propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propriedadesVLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelTcV)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelOmegaV)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(propriedadesVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(labelPcV)
                    .addComponent(jLabel19)
                    .addComponent(labelZc))
                .addGap(22, 22, 22))
        );

        jPanel2.add(propriedadesV, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 480, 130));

        panelResultadoV.setBackground(new java.awt.Color(255, 255, 255));
        panelResultadoV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resultado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        panelResultadoV.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelResultadoSimples.setBackground(new java.awt.Color(255, 255, 255));
        panelResultadoSimples.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultadoSimples.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        resultadoSimples.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultadoSimples.setText("jLabel");
        panelResultadoSimples.add(resultadoSimples, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 23, 460, -1));

        panelResultadoV.add(panelResultadoSimples, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 460, 70));

        panelResultadoRackett.setBackground(new java.awt.Color(255, 255, 255));
        panelResultadoRackett.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultadoRackett.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        resultadoRackett.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultadoRackett.setText("jLabel17");
        panelResultadoRackett.add(resultadoRackett, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 4, 460, 40));

        panelResultadoV.add(panelResultadoRackett, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 460, -1));

        panelResultadoComposto.setBackground(new java.awt.Color(255, 255, 255));
        panelResultadoComposto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultado1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        resultado1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultado1.setText("jLabel16");
        panelResultadoComposto.add(resultado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 30));

        resultado2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        resultado2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultado2.setText("jLabel16");
        panelResultadoComposto.add(resultado2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 34, 450, 30));

        panelResultadoV.add(panelResultadoComposto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 460, 70));

        jPanel2.add(panelResultadoV, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 530, 480, 100));

        abas.addTab("Volume Molar", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(abas, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoCalcularPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCalcularPActionPerformed
        switch (boxEquacaoP.getSelectedItem().toString()) {
            case "Gás Ideal":
                GasIdeal gasideal = new GasIdeal();
                switch (unidadeTempP.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaP.getText());
                        GasIdeal.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaP.getText()) + 273.15);
                        GasIdeal.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaP.getText()) + 459.67) / 1.8);
                        GasIdeal.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaP.getText()) / 1.8);
                        GasIdeal.setTemperatura(d);
                        break;
                }
                switch (unidadeVolume.getSelectedItem().toString()) {
                    case "m³/mol":
                        double e = Double.parseDouble(volume.getText());
                        GasIdeal.setVolumemolar(e);
                        break;
                    case "L/mol":
                        double f = Double.parseDouble(volume.getText()) * 0.001;
                        GasIdeal.setVolumemolar(f);
                        break;
                    case "in³/mol":
                        double g = Double.parseDouble(volume.getText()) * 0.000016387064;
                        GasIdeal.setVolumemolar(g);
                        break;
                    case "ft³/mol":
                        double h = Double.parseDouble(volume.getText()) * 0.028316846592;
                        GasIdeal.setVolumemolar(h);
                        break;
                }
                DecimalFormat df = new DecimalFormat("0.000");
                gasideal.calcularPressao();
                resultadoP.setVisible(true);
                resultadoP.setText(df.format(GasIdeal.getPressao()) + " Pa");
                break;

            case "Virial":
                Virial virial = new Virial();
                switch (unidadeTempP.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaP.getText());
                        Virial.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaP.getText()) + 273.15);
                        Virial.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaP.getText()) + 459.67) / 1.8);
                        Virial.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaP.getText()) / 1.8);
                        Virial.setTemperatura(d);
                        break;
                }
                switch (unidadeVolume.getSelectedItem().toString()) {
                    case "m³/mol":
                        double e = Double.parseDouble(volume.getText());
                        Virial.setVolumemolar(e);
                        break;
                    case "L/mol":
                        double f = Double.parseDouble(volume.getText()) * 0.001;
                        Virial.setVolumemolar(f);
                        break;
                    case "in³/mol":
                        double g = Double.parseDouble(volume.getText()) * 0.000016387064;
                        Virial.setVolumemolar(g);
                        break;
                    case "ft³/mol":
                        double h = Double.parseDouble(volume.getText()) * 0.028316846592;
                        Virial.setVolumemolar(h);
                        break;
                }
                DecimalFormat df2 = new DecimalFormat("0.000");
                String composto2 = boxCompostoP.getSelectedItem().toString();
                DAO.buscar(composto2);
                virial.calcularPressao();
                resultadoP.setVisible(true);
                resultadoP.setText(df2.format(Virial.getPressao()) + " Pa");
                break;

            case "van der Waals":
                VDW vdw = new VDW();
                switch (unidadeTempP.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaP.getText());
                        VDW.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaP.getText()) + 273.15);
                        VDW.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaP.getText()) + 459.67) / 1.8);
                        VDW.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaP.getText()) / 1.8);
                        VDW.setTemperatura(d);
                        break;
                }
                switch (unidadeVolume.getSelectedItem().toString()) {
                    case "m³/mol":
                        double e = Double.parseDouble(volume.getText());
                        VDW.setVolumemolar(e);
                        break;
                    case "L/mol":
                        double f = Double.parseDouble(volume.getText()) * 0.001;
                        VDW.setVolumemolar(f);
                        break;
                    case "in³/mol":
                        double g = Double.parseDouble(volume.getText()) * 0.000016387064;
                        VDW.setVolumemolar(g);
                        break;
                    case "ft³/mol":
                        double h = Double.parseDouble(volume.getText()) * 0.028316846592;
                        VDW.setVolumemolar(h);
                        break;
                }
                DecimalFormat df3 = new DecimalFormat("0.000");
                String composto3 = boxCompostoP.getSelectedItem().toString();
                DAO.buscar(composto3);
                vdw.calcularPressao();
                resultadoP.setVisible(true);
                resultadoP.setText(df3.format(VDW.getPressao()) + " Pa");
                break;

            case "Redlich-Kwong":
                RK rk = new RK();
                switch (unidadeTempP.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaP.getText());
                        RK.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaP.getText()) + 273.15);
                        RK.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaP.getText()) + 459.67) / 1.8);
                        RK.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaP.getText()) / 1.8);
                        RK.setTemperatura(d);
                        break;
                }
                switch (unidadeVolume.getSelectedItem().toString()) {
                    case "m³/mol":
                        double e = Double.parseDouble(volume.getText());
                        RK.setVolumemolar(e);
                        break;
                    case "L/mol":
                        double f = Double.parseDouble(volume.getText()) * 0.001;
                        RK.setVolumemolar(f);
                        break;
                    case "in³/mol":
                        double g = Double.parseDouble(volume.getText()) * 0.000016387064;
                        RK.setVolumemolar(g);
                        break;
                    case "ft³/mol":
                        double h = Double.parseDouble(volume.getText()) * 0.028316846592;
                        RK.setVolumemolar(h);
                        break;
                }
                DecimalFormat df4 = new DecimalFormat("0.000");
                String composto4 = boxCompostoP.getSelectedItem().toString();
                DAO.buscar(composto4);
                rk.calcularPressao();
                resultadoP.setVisible(true);
                resultadoP.setText(df4.format(RK.getPressao()) + " Pa");
                break;

            case "Soave-Redlich-Kwong":
                SRK srk = new SRK();
                switch (unidadeTempP.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaP.getText());
                        SRK.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaP.getText()) + 273.15);
                        SRK.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaP.getText()) + 459.67) / 1.8);
                        SRK.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaP.getText()) / 1.8);
                        SRK.setTemperatura(d);
                        break;
                }
                switch (unidadeVolume.getSelectedItem().toString()) {
                    case "m³/mol":
                        double e = Double.parseDouble(volume.getText());
                        SRK.setVolumemolar(e);
                        break;
                    case "L/mol":
                        double f = Double.parseDouble(volume.getText()) * 0.001;
                        SRK.setVolumemolar(f);
                        break;
                    case "in³/mol":
                        double g = Double.parseDouble(volume.getText()) * 0.000016387064;
                        SRK.setVolumemolar(g);
                        break;
                    case "ft³/mol":
                        double h = Double.parseDouble(volume.getText()) * 0.028316846592;
                        SRK.setVolumemolar(h);
                        break;
                }
                DecimalFormat df5 = new DecimalFormat("0.000");
                String composto5 = boxCompostoP.getSelectedItem().toString();
                DAO.buscar(composto5);
                srk.calcularPressao();
                resultadoP.setVisible(true);
                resultadoP.setText(df5.format(SRK.getPressao()) + " Pa");
                break;

            case "Peng-Robinson":
                PR pr = new PR();
                switch (unidadeTempP.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaP.getText());
                        PR.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaP.getText()) + 273.15);
                        PR.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaP.getText()) + 459.67) / 1.8);
                        PR.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaP.getText()) / 1.8);
                        PR.setTemperatura(d);
                        break;
                }
                switch (unidadeVolume.getSelectedItem().toString()) {
                    case "m³/mol":
                        double e = Double.parseDouble(volume.getText());
                        PR.setVolumemolar(e);
                        break;
                    case "L/mol":
                        double f = Double.parseDouble(volume.getText()) * 0.001;
                        PR.setVolumemolar(f);
                        break;
                    case "in³/mol":
                        double g = Double.parseDouble(volume.getText()) * 0.000016387064;
                        PR.setVolumemolar(g);
                        break;
                    case "ft³/mol":
                        double h = Double.parseDouble(volume.getText()) * 0.028316846592;
                        PR.setVolumemolar(h);
                        break;
                }
                DecimalFormat df6 = new DecimalFormat("0.000");
                String composto6 = boxCompostoP.getSelectedItem().toString();
                DAO.buscar(composto6);
                pr.calcularPressao();
                resultadoP.setVisible(true);
                resultadoP.setText(df6.format(PR.getPressao()) + " Pa");
                break;
        }
    }//GEN-LAST:event_botaoCalcularPActionPerformed

    private void botaoCalcularVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCalcularVActionPerformed
        switch (boxEquacaoV.getSelectedItem().toString()) {
            case "Gás Ideal":
                GasIdeal gasidealv = new GasIdeal();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        GasIdeal.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        GasIdeal.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        GasIdeal.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        GasIdeal.setTemperatura(d);
                        break;
                }
                switch (unidadePressao.getSelectedItem().toString()) {
                    case "Pa":
                        double i = Double.parseDouble(pressao.getText());
                        GasIdeal.setPressao(i);
                        break;
                    case "bar":
                        double j = Double.parseDouble(pressao.getText()) * 100000;
                        GasIdeal.setPressao(j);
                        break;
                    case "mmHg":
                        double k = Double.parseDouble(pressao.getText()) * 133.322368421;
                        GasIdeal.setPressao(k);
                        break;
                    case "atm":
                        double l = Double.parseDouble(pressao.getText()) * 101325;
                        GasIdeal.setPressao(l);
                        break;
                    case "PSI":
                        double m = Double.parseDouble(pressao.getText()) * 6894.75729317;
                        GasIdeal.setPressao(m);
                        break;
                }
                DecimalFormat df7 = new DecimalFormat("0.000");
                gasidealv.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoRackett.setVisible(false);
                panelResultadoSimples.setVisible(true);
                resultadoSimples.setText(df7.format(GasIdeal.getVolumemolar()) + " m³/mol");
                break;

            case "Virial":
                Virial virialv = new Virial();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        Virial.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        Virial.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        Virial.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        Virial.setTemperatura(d);
                        break;
                }
                switch (unidadePressao.getSelectedItem().toString()) {
                    case "Pa":
                        double i = Double.parseDouble(pressao.getText());
                        Virial.setPressao(i);
                        break;
                    case "bar":
                        double j = Double.parseDouble(pressao.getText()) * 100000;
                        Virial.setPressao(j);
                        break;
                    case "mmHg":
                        double k = Double.parseDouble(pressao.getText()) * 133.322368421;
                        Virial.setPressao(k);
                        break;
                    case "atm":
                        double l = Double.parseDouble(pressao.getText()) * 101325;
                        Virial.setPressao(l);
                        break;
                    case "PSI":
                        double m = Double.parseDouble(pressao.getText()) * 6894.75729317;
                        Virial.setPressao(m);
                        break;
                }
                DecimalFormat df8 = new DecimalFormat("0.000");
                String composto7 = boxComposto.getSelectedItem().toString();
                DAO.buscar(composto7);
                virialv.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoRackett.setVisible(false);
                panelResultadoSimples.setVisible(true);
                resultadoSimples.setText(df8.format(Virial.getVolumemolar()) + " m³/mol");
                break;

            case "van der Waals":
                VDW vdwv = new VDW();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        VDW.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        VDW.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        VDW.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        VDW.setTemperatura(d);
                        break;
                }
                switch (unidadePressao.getSelectedItem().toString()) {
                    case "Pa":
                        double i = Double.parseDouble(pressao.getText());
                        VDW.setPressao(i);
                        break;
                    case "bar":
                        double j = Double.parseDouble(pressao.getText()) * 100000;
                        VDW.setPressao(j);
                        break;
                    case "mmHg":
                        double k = Double.parseDouble(pressao.getText()) * 133.322368421;
                        VDW.setPressao(k);
                        break;
                    case "atm":
                        double l = Double.parseDouble(pressao.getText()) * 101325;
                        VDW.setPressao(l);
                        break;
                    case "PSI":
                        double m = Double.parseDouble(pressao.getText()) * 6894.75729317;
                        VDW.setPressao(m);
                        break;
                }
                DecimalFormat df9 = new DecimalFormat("0.000");
                String composto8 = boxComposto.getSelectedItem().toString();
                DAO.buscar(composto8);
                vdwv.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoRackett.setVisible(false);
                if (MetodoMatsoukas.aux == 1) {
                    CorrelacaoLeeKesler.calcularPressao();
                    if (VDW.getPressao() > CorrelacaoLeeKesler.getPressao()) {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - líquido comprimido");
                    } else {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - vapor superaquecido");
                    }
                } else if (MetodoMatsoukas.aux == 3){
                    panelResultadoSimples.setVisible(false);
                    panelResultadoComposto.setVisible(true);
                    resultado1.setText(MetodoMatsoukas.xmenor + " m³/mol" + " - líquido saturado");
                    resultado2.setText(MetodoMatsoukas.xmaior + " m³/mol" + " - vapor saturado");
                }
                break;

            case "Redlich-Kwong":
                RK rkv = new RK();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        RK.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        RK.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        RK.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        RK.setTemperatura(d);
                        break;
                }
                switch (unidadePressao.getSelectedItem().toString()) {
                    case "Pa":
                        double i = Double.parseDouble(pressao.getText());
                        RK.setPressao(i);
                        break;
                    case "bar":
                        double j = Double.parseDouble(pressao.getText()) * 100000;
                        RK.setPressao(j);
                        break;
                    case "mmHg":
                        double k = Double.parseDouble(pressao.getText()) * 133.322368421;
                        RK.setPressao(k);
                        break;
                    case "atm":
                        double l = Double.parseDouble(pressao.getText()) * 101325;
                        RK.setPressao(l);
                        break;
                    case "PSI":
                        double m = Double.parseDouble(pressao.getText()) * 6894.75729317;
                        RK.setPressao(m);
                        break;
                }
                DecimalFormat df10 = new DecimalFormat("0.000");
                String composto9 = boxComposto.getSelectedItem().toString();
                DAO.buscar(composto9);
                rkv.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoRackett.setVisible(false);
                if (MetodoMatsoukas.aux == 1) {
                    CorrelacaoLeeKesler.calcularPressao();
                    if (RK.getPressao() > CorrelacaoLeeKesler.getPressao()) {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - líquido comprimido");
                    } else {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - vapor superaquecido");
                    }
                } else if (MetodoMatsoukas.aux == 3){
                    panelResultadoSimples.setVisible(false);
                    panelResultadoComposto.setVisible(true);
                    resultado1.setText(MetodoMatsoukas.xmenor + " m³/mol" + " - líquido saturado");
                    resultado2.setText(MetodoMatsoukas.xmaior + " m³/mol" + " - vapor saturado");
                }
                break;

            case "Soave-Redlich-Kwong":
                SRK srkv = new SRK();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        SRK.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        SRK.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        SRK.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        SRK.setTemperatura(d);
                        break;
                }
                switch (unidadePressao.getSelectedItem().toString()) {
                    case "Pa":
                        double i = Double.parseDouble(pressao.getText());
                        SRK.setPressao(i);
                        break;
                    case "bar":
                        double j = Double.parseDouble(pressao.getText()) * 100000;
                        SRK.setPressao(j);
                        break;
                    case "mmHg":
                        double k = Double.parseDouble(pressao.getText()) * 133.322368421;
                        SRK.setPressao(k);
                        break;
                    case "atm":
                        double l = Double.parseDouble(pressao.getText()) * 101325;
                        SRK.setPressao(l);
                        break;
                    case "PSI":
                        double m = Double.parseDouble(pressao.getText()) * 6894.75729317;
                        SRK.setPressao(m);
                        break;
                }
                DecimalFormat df11 = new DecimalFormat("0.000");
                String composto10 = boxComposto.getSelectedItem().toString();
                DAO.buscar(composto10);
                srkv.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoRackett.setVisible(false);
                if (MetodoMatsoukas.aux == 1) {
                    CorrelacaoLeeKesler.calcularPressao();
                    if (SRK.getPressao() > CorrelacaoLeeKesler.getPressao()) {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - líquido comprimido");
                    } else {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - vapor superaquecido");
                    }
                } else if (MetodoMatsoukas.aux == 3){
                    panelResultadoSimples.setVisible(false);
                    panelResultadoComposto.setVisible(true);
                    resultado1.setText(MetodoMatsoukas.xmenor + " m³/mol" + " - líquido saturado");
                    resultado2.setText(MetodoMatsoukas.xmaior + " m³/mol" + " - vapor saturado");
                }
                break;

            case "Peng-Robinson":
                PR prv = new PR();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        PR.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        PR.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        PR.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        PR.setTemperatura(d);
                        break;
                }
                 switch (unidadePressao.getSelectedItem().toString()) {
                    case "Pa":
                        double i = Double.parseDouble(pressao.getText());
                        SRK.setPressao(i);
                        break;
                    case "bar":
                        double j = Double.parseDouble(pressao.getText()) * 100000;
                        SRK.setPressao(j);
                        break;
                    case "mmHg":
                        double k = Double.parseDouble(pressao.getText()) * 133.322368421;
                        SRK.setPressao(k);
                        break;
                    case "atm":
                        double l = Double.parseDouble(pressao.getText()) * 101325;
                        SRK.setPressao(l);
                        break;
                    case "PSI":
                        double m = Double.parseDouble(pressao.getText()) * 6894.75729317;
                        SRK.setPressao(m);
                        break;
                }
                DecimalFormat df12 = new DecimalFormat("0.000");
                String composto11 = boxComposto.getSelectedItem().toString();
                DAO.buscar(composto11);
                prv.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoRackett.setVisible(false);
                if (MetodoMatsoukas.aux == 1) {
                    CorrelacaoLeeKesler.calcularPressao();
                    if (PR.getPressao() > CorrelacaoLeeKesler.getPressao()) {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - líquido comprimido");
                    } else {
                        panelResultadoComposto.setVisible(false);
                        panelResultadoSimples.setVisible(true);
                        resultadoSimples.setText((MetodoMatsoukas.x1) + " m³/mol" + " - vapor superaquecido");
                    }
                } else if (MetodoMatsoukas.aux == 3){
                    panelResultadoSimples.setVisible(false);
                    panelResultadoComposto.setVisible(true);
                    resultado1.setText(MetodoMatsoukas.xmenor + " m³/mol" + " - líquido saturado");
                    resultado2.setText(MetodoMatsoukas.xmaior + " m³/mol" + " - vapor saturado");
                }
                break;

            case "Rackett":
                Rackett rackett = new Rackett();
                switch (unidadeTempV.getSelectedItem().toString()) {
                    case "K":
                        float a = Float.parseFloat(temperaturaV.getText());
                        Rackett.setTemperatura(a);
                        break;
                    case "ºC":
                        float b = (float) (Float.parseFloat(temperaturaV.getText()) + 273.15);
                        Rackett.setTemperatura(b);
                        break;
                    case "ºF":
                        float c = (float) ((Float.parseFloat(temperaturaV.getText()) + 459.67) / 1.8);
                        Rackett.setTemperatura(c);
                        break;
                    case "R":
                        float d = (float) (Float.parseFloat(temperaturaV.getText()) / 1.8);
                        Rackett.setTemperatura(d);
                        break;
                }
                String composto12 = boxComposto.getSelectedItem().toString();
                DAO.buscar(composto12);
                rackett.calcularVolumeMolar();
                panelResultadoComposto.setVisible(false);
                panelResultadoSimples.setVisible(false);
                panelResultadoRackett.setVisible(true);
                resultadoRackett.setText(Rackett.getVolumemolar() + " m³/mol");
                break;
        }
    }//GEN-LAST:event_botaoCalcularVActionPerformed

    private void boxCompostoPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxCompostoPItemStateChanged
        String a = boxCompostoP.getSelectedItem().toString();
        DAO.buscar(a);
        labelTc.setText(Float.toString(EquacoesDeEstado.getTemperaturacritica()) + " K");
        labelPc.setText(Float.toString(EquacoesDeEstado.getPressaocritica()) + " Pa");
        labelOmega.setText(Float.toString(EquacoesDeEstado.getFatoracentrico()));
    }//GEN-LAST:event_boxCompostoPItemStateChanged

    private void boxCompostoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxCompostoItemStateChanged
        String b = boxComposto.getSelectedItem().toString();
        DAO.buscar(b);
        labelTcV.setText(Float.toString(EquacoesDeEstado.getTemperaturacritica()) + " K");
        labelPcV.setText(Float.toString(EquacoesDeEstado.getPressaocritica()) + " Pa");
        labelOmegaV.setText(Float.toString(EquacoesDeEstado.getFatoracentrico()));
        labelZc.setText(Float.toString(EquacoesDeEstado.getFatorcompcritico()));
    }//GEN-LAST:event_boxCompostoItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EquacoesDeestado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EquacoesDeestado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EquacoesDeestado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EquacoesDeestado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EquacoesDeestado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane abas;
    private javax.swing.JButton botaoCalcularP;
    private javax.swing.JButton botaoCalcularV;
    private javax.swing.JComboBox<Object> boxComposto;
    private javax.swing.JComboBox<Object> boxCompostoP;
    private javax.swing.JComboBox<String> boxEquacaoP;
    private javax.swing.JComboBox<String> boxEquacaoV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labelOmega;
    private javax.swing.JLabel labelOmegaV;
    private javax.swing.JLabel labelPc;
    private javax.swing.JLabel labelPcV;
    private javax.swing.JLabel labelTc;
    private javax.swing.JLabel labelTcV;
    private javax.swing.JLabel labelZc;
    private javax.swing.JPanel panelResultadoComposto;
    private javax.swing.JPanel panelResultadoP;
    private javax.swing.JPanel panelResultadoRackett;
    private javax.swing.JPanel panelResultadoSimples;
    private javax.swing.JPanel panelResultadoV;
    private javax.swing.JTextField pressao;
    private javax.swing.JPanel propriedadesP;
    private javax.swing.JPanel propriedadesV;
    private javax.swing.JLabel resultado1;
    private javax.swing.JLabel resultado2;
    private javax.swing.JLabel resultadoP;
    private javax.swing.JLabel resultadoRackett;
    private javax.swing.JLabel resultadoSimples;
    private javax.swing.JTextField temperaturaP;
    private javax.swing.JTextField temperaturaV;
    private javax.swing.JComboBox<String> unidadePressao;
    private javax.swing.JComboBox<String> unidadeTempP;
    private javax.swing.JComboBox<String> unidadeTempV;
    private javax.swing.JComboBox<String> unidadeVolume;
    private javax.swing.JTextField volume;
    // End of variables declaration//GEN-END:variables
}
